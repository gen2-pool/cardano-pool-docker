#!/bin/bash

# Retiring Your Stake Pool
#
# SEE: https://www.coincashew.com/coins/overview-ada/guide-how-to-build-a-haskell-stakepool-node/part-iv-administration/retiring-your-stake-pool
#
#  If you no longer want to operate your stake pool, then you 
# can deregister the pool. Deregistering the pool retires the 
# pool.
#

source "${SRC_DIR}/functions/check_balance"
source "${SRC_DIR}/functions/check_pool_registration"
source "${SRC_DIR}/functions/wait_for_pool_registration"
source "${SRC_DIR}/functions/wait_for_slot"
source "${SRC_DIR}/functions/wait_for_sync"
source "${SRC_DIR}/functions/current_epoch"

TIMESTAMP=$(date +%s)

# Enter staking directory
stakingDir="${WORK_DIR}/${CARDANO_NETWORK}-staking"
mkdir -p wallets/${rewardWallet}/transactions

echo ""
echo "Retiring stake pool."

# Check for required files
if [ ! -f "wallets/${rewardWallet}/stake.skey" ]; then
    echo "Missing required stake.skey. You need to run \`wallet create --name ${rewardWallet}\` to generate this key."
    exit 4 # TODO: maso: 2022: 
fi

if [ ! -f "wallets/${rewardWallet}/payment.skey" ]; then
    echo "Missing payment.skey. You need to run \`wallet create --name ${rewardWallet}\` to generate this key."
    exit 4 # TODO: maso: 2022: 
fi

if [ ! -f "wallets/${rewardWallet}/payment.addr" ]; then
    echo "Missing payment.addr. You need to run \`wallet create --naem ${rewardWallet}\` to generate this key."
    exit 4 # TODO: maso: 2022: 
fi

if [ ! -f "${stakingDir}/cold-keys/cold.skey" ]; then
    echo "Missing required cold-keys/cold.skey. You need to run \`staking generateOperationalCertificate\` to generate this key."
    exit 4 # TODO: maso: 2022: 
fi

if [ ! -f "${stakingDir}/pool.cert" ]; then
    echo "Missing required pool.cert. You need to run \`staking generateRegistrationCertificate\` to generate this certificate."
    exit 4 # TODO: maso: 2022: 
fi

if [ ! -f "wallets/${rewardWallet}/delegation.cert" ]; then
    echo "Missing required ${rewardWallet}/delegation.cert. You need to run \`staking generateRegistrationCertificate\` to generate this certificate."
    exit 4 # TODO: maso: 2022: 
fi

# Wait for node to sync
if [[ "${WAIT_FOR_SYNC}" == "True" ]]; then
    wait_for_sync 99.90
fi

# 01- generate the protocol-parameters.
docker run --interactive \
    --env CARDANO_NODE_SOCKET_PATH=/node/node.socket \
    --volume "${WORK_DIR}/${CARDANO_NETWORK}-relay:/node" \
    --volume "${stakingDir}:/root" \
    --workdir /root \
    genzbank/cardano-cli \
    query protocol-parameters \
        ${NETWORK_ARGUMENT} \
        --out-file protocol.json
    
    
# 02- Calculate the current epoch.
epoch=$(get_current_epoch)
echo "Current EPOCH is ${epoch}"


# 03- Find the earliest and latest retirement epoch that your pool can retire.
poolRetireMaxEpoch=$(cat ${stakingDir}/protocol.json | jq -r '.poolRetireMaxEpoch')
echo "poolRetireMaxEpoch: ${poolRetireMaxEpoch}"

minRetirementEpoch=$(( ${epoch} + 1 ))
maxRetirementEpoch=$(( ${epoch} + ${poolRetireMaxEpoch} ))

echo "earliest epoch for retirement is: ${minRetirementEpoch}"
echo "latest epoch for retirement is: ${maxRetirementEpoch}"

# 04- Create the deregistration certificate
docker run --interactive \
    --env CARDANO_NODE_SOCKET_PATH=/node/node.socket \
    --volume "${WORK_DIR}/${CARDANO_NETWORK}-relay:/node" \
    --volume "${stakingDir}:/root" \
    --volume "${WORK_DIR}/wallets:/wallets" \
    --workdir /root \
    genzbank/cardano-cli \
    stake-pool deregistration-certificate \
      --cold-verification-key-file cold-keys/cold.vkey \
      --epoch $minRetirementEpoch \
      --out-file pool.dereg

# 05- Find your balance and UTXOs.
EXTRA_FEE=9000
POOL_DEPOSIT=0 # Is update command
ADDRESS=$(cat "wallets/${rewardWallet}/payment.addr")
check_balance $(expr ${POOL_DEPOSIT} + ${EXTRA_FEE})
# NO need

# 06- Find the tip of the blockchain to set the invalid-here after parameter properly.
SLOT=$("${SRC_DIR}/relay_get_slot")
TTL=$(expr ${SLOT} + 1000)

# 07- Run the build-raw transaction command

# Draft transaction
docker run --interactive \
    --env CARDANO_NODE_SOCKET_PATH=/node/node.socket \
    --volume "${WORK_DIR}/${CARDANO_NETWORK}-relay:/node" \
    --volume "${WORK_DIR}/wallets:/wallets" \
    --volume "${stakingDir}:/root" \
    --workdir /root \
    genzbank/cardano-cli \
    transaction build-raw \
        --tx-in "${UTXO}#${TXIX}" \
        --tx-out ${ADDRESS}+0 \
        --fee 0 \
        --out-file "/wallets/${rewardWallet}/transactions/retire_stake_pool.draft" \
        --certificate-file pool.dereg ${DELEG_CERTS}

# 08- Calculate the minimum fee
## Calculate the fee
FEE=$(docker run --interactive \
    --env CARDANO_NODE_SOCKET_PATH=/node/node.socket \
    --volume "${WORK_DIR}/${CARDANO_NETWORK}-relay:/node" \
    --volume "${WORK_DIR}/wallets:/wallets" \
    --volume "${stakingDir}:/root" \
    --workdir /root \
    genzbank/cardano-cli \
    transaction calculate-min-fee \
        --tx-body-file "/wallets/${rewardWallet}/transactions/retire_stake_pool.draft" \
        --tx-in-count 1 \
        --tx-out-count 1 \
        ${NETWORK_ARGUMENT} \
        --witness-count 1 \
        --byron-witness-count 0 \
        --protocol-params-file protocol.json | tr ' ' '\n' | head -1)
TOTAL_PRICE=$(expr ${FEE} + ${POOL_DEPOSIT})

# 09- Calculate your change output
echo "Fee is: ${FEE} Lovelace"
echo "Pool-Deposit: ${POOL_DEPOSIT} Lovelace"
echo "Total Price is: ${TOTAL_PRICE} Lovelace"

# Display transaction info
REMAINING_AFTER_TX=$(expr ${LOVELACE} - ${TOTAL_PRICE})
echo "Creating transaction"
echo "Lovelace after transaction: ${REMAINING_AFTER_TX}"
echo "Current tip Slot: ${SLOT}"
echo "TTL: ${TTL}"

# 10- Build the transaction
docker run --interactive \
    --env CARDANO_NODE_SOCKET_PATH=/node/node.socket \
    --volume "${WORK_DIR}/${CARDANO_NETWORK}-relay:/node" \
    --volume "${WORK_DIR}/wallets:/wallets" \
    --volume "${stakingDir}:/root" \
    --workdir /root \
    genzbank/cardano-cli \
    transaction build-raw \
        --tx-in "${UTXO}#${TXIX}" \
        --tx-out ${ADDRESS}+${REMAINING_AFTER_TX} \
        --ttl ${TTL} \
        --fee ${FEE} \
        --out-file "/wallets/${rewardWallet}/transactions/retire_stake_pool.raw" \
        --certificate-file pool.dereg ${DELEG_CERTS}
        
# 11- Sign the transaction
docker run --interactive \
    --env CARDANO_NODE_SOCKET_PATH=/node/node.socket \
    --volume "${WORK_DIR}/${CARDANO_NETWORK}-relay:/node" \
    --volume "${WORK_DIR}/wallets:/wallets" \
    --volume "${stakingDir}:/root" \
    --workdir /root \
    genzbank/cardano-cli \
    transaction sign \
        --tx-body-file     "/wallets/${rewardWallet}/transactions/retire_stake_pool.raw" \
        --signing-key-file "/wallets/${rewardWallet}/payment.skey" \
        --signing-key-file "/wallets/${rewardWallet}/stake.skey" \
        ${MULTIOWNERS_SIGN} \
        --signing-key-file "cold-keys/cold.skey" \
        ${NETWORK_ARGUMENT} \
        --out-file "/wallets/${rewardWallet}/transactions/retire_stake_pool.signed"

# 12- Send the transaction

# Submit the transaction
read -n 1 -r -s -p $'Press enter to submit the certificates...\n'


