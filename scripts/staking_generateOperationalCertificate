#!/bin/bash

# From Documentation
# https://github.com/input-output-hk/cardano-tutorials/blob/master/node-setup/060_node_keys.md
# https://github.com/input-output-hk/cardano-tutorials/blob/master/node-setup/080_register_stakepool.md

# Init vars
# source /scripts/init_node_vars
source "${SRC_DIR}/functions/wait_for_sync"

# Enter staking directory
mkdir -p "${WORK_DIR}/${CARDANO_NETWORK}-staking/pool-keys"
mkdir -p "${WORK_DIR}/${CARDANO_NETWORK}-staking/cold-keys"
# cd ${WORK_DIR}/staking/

echo ""
echo "Generate operational certificates"

if [ -d "${WORK_DIR}/${CARDANO_NETWORK}-staking/pool-keys/" ]; then
    if [ -f "${WORK_DIR}/${CARDANO_NETWORK}-staking/pool-keys/KESPERIOD" ]; then
        source "${WORK_DIR}/${CARDANO_NETWORK}-staking/pool-keys/KESPERIOD"
    fi
    BACKUPNAME=pool-keys.$(date +%s).tar.gz
    echo "pool-keys already exist."
    echo "Created at slot: ${KESSLOT}"
    echo "Backing up to ${BACKUPNAME} before creating new KES keys."
    mkdir -p "${WORK_DIR}/backups/"
    tar -zcvf \
        "${WORK_DIR}/backups/${BACKUPNAME}" \
        "${WORK_DIR}/${CARDANO_NETWORK}-staking/pool-keys/" > /dev/null
fi

if [ -d "${WORK_DIR}/${CARDANO_NETWORK}-staking/cold-keys/" ]; then
    BACKUPNAME=cold-keys.$(date +%s).tar.gz
    echo "Backing up to ${BACKUPNAME} before creating new KES keys."
    mkdir -p "${WORK_DIR}/backups/"
    tar -zcvf
        "${WORK_DIR}/backups/${BACKUPNAME}" \
        "${WORK_DIR}/${CARDANO_NETWORK}-staking/cold-keys/" > /dev/null
fi

# Create cold key
if [ ! -f "${WORK_DIR}/${CARDANO_NETWORK}-staking/cold-keys/cold.skey" ]; then
    echo "Creating cold keys."
    echo "Warning: The cold keys should NOT be kept on your server. You should backup your cold keys and delete them from the server."
    echo "Alternatively you can generate the keys on a seperate offline node, and move all the neccessary certificates and keys to the active staking node."

    docker run --interactive \
        --volume "${WORK_DIR}/${CARDANO_NETWORK}-staking:/root" \
        --workdir /root \
        genzbank/cardano-cli \
        node key-gen \
            --cold-verification-key-file cold-keys/cold.vkey \
            --cold-signing-key-file cold-keys/cold.skey \
            --operational-certificate-issue-counter-file cold-keys/cold.counter

    docker run --interactive \
        --volume "${WORK_DIR}/${CARDANO_NETWORK}-staking:/root" \
        --workdir /root \
        genzbank/cardano-cli \
        stake-pool id \
            --cold-verification-key-file cold-keys/cold.vkey \
            --output-format hex > "${WORK_DIR}/${CARDANO_NETWORK}-staking/POOL_ID"
else
    echo "Cold keys already exists."
fi

# Create Verifiable Random Function key
if [ ! -f "${WORK_DIR}/${CARDANO_NETWORK}-staking/pool-keys/vrf.vkey" ]; then
    echo "Generating VRF key"
    docker run --interactive \
        --volume "${WORK_DIR}/${CARDANO_NETWORK}-staking:/root" \
        --workdir /root \
        genzbank/cardano-cli \
            node key-gen-VRF \
            --verification-key-file pool-keys/vrf.vkey \
            --signing-key-file pool-keys/vrf.skey
fi

# Create Key Evolving Signature key
if [ ! -f "${WORK_DIR}/${CARDANO_NETWORK}-staking/pool-keys/kes.vkey" ]; then
    echo "Generating KES key"
    
    docker run --interactive \
        --volume "${WORK_DIR}/${CARDANO_NETWORK}-staking:/root" \
        --workdir /root \
        genzbank/cardano-cli \
           node key-gen-KES \
               --verification-key-file pool-keys/kes.vkey \
               --signing-key-file pool-keys/kes.skey
else
    echo  "KES key exist"
fi

# Get tip
# TIP=$1
if [ -z "$tip" ]; then
    echo "You need to find the current tip of the blockchain. To get the current tip you can run the command \`relay getSlot\` in the your relay container."
    read -p "Enter the current tip slot: " TIP
elif [ "$tip" == "LIVE" ]; then
    echo "Getting slot from live socket"

    if [[ "${WAIT_FOR_SYNC}" == "True" ]]; then
        wait_for_sync 99.90
    fi

    TIP=$("${SRC_DIR}/relay_get_slot")
fi

# Get KESPeriod
SLOTSPERKESPERIOD=$(jq -r '.slotsPerKESPeriod' "${WORK_DIR}/config/${CARDANO_NETWORK}net-shelley-genesis.json")
MAXKESEVOLUTIONS=$(jq -r '.maxKESEvolutions' "${WORK_DIR}/config/${CARDANO_NETWORK}net-shelley-genesis.json")
MAXKESSLOTS=$(expr ${SLOTSPERKESPERIOD} \* ${MAXKESEVOLUTIONS})
KESPERIOD=$(expr ${TIP} / ${SLOTSPERKESPERIOD})
# KESPERIOD=$(expr ${KESPERIOD} - 1) # Because of bug in 1.19.0
EXPIRESLOT=$(expr ${TIP} + ${MAXKESSLOTS})
echo "export SLOTSPERKESPERIOD=${SLOTSPERKESPERIOD}" > "${WORK_DIR}/${CARDANO_NETWORK}-staking/pool-keys/KESPERIOD"
echo "export KESSLOT=${TIP}" >> "${WORK_DIR}/${CARDANO_NETWORK}-staking/pool-keys/KESPERIOD"
echo "export MAXKESEVOLUTIONS=${MAXKESEVOLUTIONS}" >> "${WORK_DIR}/${CARDANO_NETWORK}-staking/pool-keys/KESPERIOD"
echo "export MAXKESSLOTS=${MAXKESSLOTS}" >> "${WORK_DIR}/${CARDANO_NETWORK}-staking/pool-keys/KESPERIOD"
echo "export KESPERIOD=${KESPERIOD}" >> "${WORK_DIR}/${CARDANO_NETWORK}-staking/pool-keys/KESPERIOD"
echo "export EXPIRESLOT=${EXPIRESLOT}" >> "${WORK_DIR}/${CARDANO_NETWORK}-staking/pool-keys/KESPERIOD"

echo "Current slot: ${TIP}"
echo "slotsPerKesPeriod: ${SLOTSPERKESPERIOD}"
echo "KESPeriod: ${KESPERIOD}"
echo "MaxKESSlots: ${MAXKESSLOTS}"
echo "KESExpireSlot: ${EXPIRESLOT}"

# Create an operational node certificate
docker run --interactive \
    --volume "${WORK_DIR}/${CARDANO_NETWORK}-staking:/root" \
    --workdir /root \
    genzbank/cardano-cli \
    node issue-op-cert \
        --kes-verification-key-file pool-keys/kes.vkey \
        --cold-signing-key-file cold-keys/cold.skey \
        --operational-certificate-issue-counter cold-keys/cold.counter \
        --kes-period ${KESPERIOD} \
        --out-file pool-keys/node.cert

# TODO: maso, 2022: cehc all files
# kes.skey  kes.vkey  node.cert  vrf.skey  vrf.vkey
echo "Successfully created node operational keys."
