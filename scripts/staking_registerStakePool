#!/bin/bash

# From Documentation
# https://github.com/input-output-hk/cardano-tutorials/blob/master/node-setup/080_register_stakepool.md

# Init vars
source "${SRC_DIR}/functions/check_balance"
source "${SRC_DIR}/functions/check_pool_registration"
source "${SRC_DIR}/functions/wait_for_pool_registration"
source "${SRC_DIR}/functions/wait_for_slot"
source "${SRC_DIR}/functions/wait_for_sync"
TIMESTAMP=$(date +%s)

# Enter staking directory
stakingDir="${WORK_DIR}/${CARDANO_NETWORK}-staking"
mkdir -p wallets/${rewardWallet}/transactions

echo ""
echo "Submitting stake pool certificates to the blockchain."

# Check for required files
if [ ! -f "wallets/${rewardWallet}/stake.skey" ]; then
    echo "Missing required stake.skey. You need to run \`wallet create --name ${rewardWallet}\` to generate this key."
    exit 4 # TODO: maso: 2022: 
fi

if [ ! -f "wallets/${rewardWallet}/payment.skey" ]; then
    echo "Missing payment.skey. You need to run \`wallet create --name ${rewardWallet}\` to generate this key."
    exit 4 # TODO: maso: 2022: 
fi

if [ ! -f "wallets/${rewardWallet}/payment.addr" ]; then
    echo "Missing payment.addr. You need to run \`wallet create --naem ${rewardWallet}\` to generate this key."
    exit 4 # TODO: maso: 2022: 
fi

if [ ! -f "${stakingDir}/cold-keys/cold.skey" ]; then
    echo "Missing required cold-keys/cold.skey. You need to run \`staking generateOperationalCertificate\` to generate this key."
    exit 4 # TODO: maso: 2022: 
fi

if [ ! -f "${stakingDir}/pool.cert" ]; then
    echo "Missing required pool.cert. You need to run \`staking generateRegistrationCertificate\` to generate this certificate."
    exit 4 # TODO: maso: 2022: 
fi

if [ ! -f "wallets/${rewardWallet}/delegation.cert" ]; then
    echo "Missing required ${rewardWallet}/delegation.cert. You need to run \`staking generateRegistrationCertificate\` to generate this certificate."
    exit 4 # TODO: maso: 2022: 
fi


# # Handle arguments
# for i in "$@"
# do
# case $i in
#     --update)
#         UPDATE=1
#     ;;
#     --no_deleg)
#         NO_DELEG=1
#     ;;
#     --cold-create)
#         COLD_CREATE=1
#     ;;
# esac
# done

EXTRA_FEE=9000

# if [ -z "$COLD_CREATE" ]; then
#     if [ -z "$UPDATE" ]; then
#         if [ -n "$(check_pool_registration)" ]; then
#             echo "Your stake pool has already been registered in the blockchain."
#             touch ${NODE_PATH}/staking/wallets/${rewardWallet}/transactions/register_stake_pool.submitted
#             exit
#         fi
#     else
#         if [ -z "$(check_pool_registration)" ]; then
#             echo "Pool is not registered in the blockchain. You cannot update the certificates. Register the stakepool first."
#             exit
#         fi
#     fi
# fi

# Wait for node to sync
if [[ "${WAIT_FOR_SYNC}" == "True" ]]; then
    wait_for_sync 99.90
fi

# Generate protocol
# if [ -z "$COLD_CREATE" ]; then

docker run --interactive \
    --env CARDANO_NODE_SOCKET_PATH=/node/node.socket \
    --volume "${WORK_DIR}/${CARDANO_NETWORK}-relay:/node" \
    --volume "${stakingDir}:/root" \
    --workdir /root \
    genzbank/cardano-cli \
    query protocol-parameters \
        ${NETWORK_ARGUMENT} \
        --out-file protocol.json
#else
#    if [ ! -f "${NODE_PATH}/staking/protocol.json" ]; then
#        read -n 1 -r -s -p "Missing ${NODE_PATH}/staking/protocol.json. You must transfer this file from an online node. Press ENTER when you have placed the file and is ready to continue."
#    fi
#fi

# Get pool-deposit
#if [ -z "$UPDATE" ]; then
#    POOL_DEPOSIT=$(jq -r .stakePoolDeposit protocol.json)
#else
    POOL_DEPOSIT=0
#fi

# Find UTXO in address with enough lovelace to do the transaction
ADDRESS=$(cat "wallets/${rewardWallet}/payment.addr")
check_balance $(expr ${POOL_DEPOSIT} + ${EXTRA_FEE})

# Multiowners delegation certificates
if [ -n "$MULTI_OWNERS" ]; then
    echo "Multiple owner delegation certificates"
    for i in $(echo ${MULTI_OWNERS} | sed "s/,/ /g")
    do
        echo "$i"
        MULTIOWNERS_CERT_STRING="${MULTIOWNERS_CERT_STRING} --certificate-file wallets/$i/delegation.cert"
        MULTIOWNERS_SIGN="${MULTIOWNERS_SIGN} --signing-key-file wallets/$i/stake.skey"
    done
    echo $MULTIOWNERS_CERT_STRING
    echo $MULTIOWNERS_SIGN
fi

if [ -z "$NO_DELEG" ]; then
    DELEG_CERTS="--certificate-file /wallets/${rewardWallet}/delegation.cert ${MULTIOWNERS_CERT_STRING}"
fi

# Draft transaction
docker run --interactive \
    --env CARDANO_NODE_SOCKET_PATH=/node/node.socket \
    --volume "${WORK_DIR}/${CARDANO_NETWORK}-relay:/node" \
    --volume "${WORK_DIR}/wallets:/wallets" \
    --volume "${stakingDir}:/root" \
    --workdir /root \
    genzbank/cardano-cli \
    transaction build-raw \
        --tx-in "${UTXO}#${TXIX}" \
        --tx-out ${ADDRESS}+0 \
        --ttl 0 \
        --fee 0 \
        --out-file "/wallets/${rewardWallet}/transactions/register_stake_pool.draft" \
        --certificate-file pool.cert ${DELEG_CERTS}

## Calculate the fee
FEE=$(docker run --interactive \
    --env CARDANO_NODE_SOCKET_PATH=/node/node.socket \
    --volume "${WORK_DIR}/${CARDANO_NETWORK}-relay:/node" \
    --volume "${WORK_DIR}/wallets:/wallets" \
    --volume "${stakingDir}:/root" \
    --workdir /root \
    genzbank/cardano-cli \
    transaction calculate-min-fee \
        --tx-body-file "/wallets/${rewardWallet}/transactions/register_stake_pool.draft" \
        --tx-in-count 1 \
        --tx-out-count 1 \
        ${NETWORK_ARGUMENT} \
        --witness-count 1 \
        --byron-witness-count 0 \
        --protocol-params-file protocol.json | tr ' ' '\n' | head -1)
FEE=$(expr ${FEE} + ${EXTRA_FEE}) # FEE IS TOO SMALL?
TOTAL_PRICE=$(expr ${FEE} + ${POOL_DEPOSIT})

echo "Fee is: ${FEE} Lovelace"
echo "Pool-Deposit: ${POOL_DEPOSIT} Lovelace"
echo "Total Price is: ${TOTAL_PRICE} Lovelace"

# Find UTXO in address with enough lovelace to do the transaction
#if [ -z "$COLD_CREATE" ]; then
    check_balance ${TOTAL_PRICE}
    SLOT=$(get_slot)
#else
#    read -p "Enter the current tip slot: " SLOT
#fi
TTL=$(expr ${SLOT} + 500)

# Display transaction info
REMAINING_AFTER_TX=$(expr ${LOVELACE} - ${TOTAL_PRICE})
echo "Creating transaction"
echo "Lovelace after transaction: ${REMAINING_AFTER_TX}"
echo "Current tip Slot: ${SLOT}"
echo "TTL: ${TTL}"

#
# Create the transaction
#
echo "Create transaction"
docker run --interactive \
    --env CARDANO_NODE_SOCKET_PATH=/node/node.socket \
    --volume "${WORK_DIR}/${CARDANO_NETWORK}-relay:/node" \
    --volume "${WORK_DIR}/wallets:/wallets" \
    --volume "${stakingDir}:/root" \
    --workdir /root \
    genzbank/cardano-cli \
    transaction build-raw \
        --tx-in "${UTXO}#${TXIX}" \
        --tx-out ${ADDRESS}+${REMAINING_AFTER_TX} \
        --ttl ${TTL} \
        --fee ${FEE} \
        --out-file /wallets/${rewardWallet}/transactions/register_stake_pool.raw \
        --certificate-file pool.cert ${DELEG_CERTS}

# Sign the transaction
echo "Sign transaction"
docker run --interactive \
    --env CARDANO_NODE_SOCKET_PATH=/node/node.socket \
    --volume "${WORK_DIR}/${CARDANO_NETWORK}-relay:/node" \
    --volume "${WORK_DIR}/wallets:/wallets" \
    --volume "${stakingDir}:/root" \
    --workdir /root \
    genzbank/cardano-cli \
    transaction sign \
        --tx-body-file     "/wallets/${rewardWallet}/transactions/register_stake_pool.raw" \
        --signing-key-file "/wallets/${rewardWallet}/payment.skey" \
        --signing-key-file "/wallets/${rewardWallet}/stake.skey" \
        ${MULTIOWNERS_SIGN} \
        --signing-key-file "cold-keys/cold.skey" \
        ${NETWORK_ARGUMENT} \
        --out-file "/wallets/${rewardWallet}/transactions/register_stake_pool.signed"


# Submit the transaction
read -n 1 -r -s -p $'Press enter to submit the certificates...\n'

echo "Submit transaction"
OUT=$(cardano-cli transaction submit \
    --tx-file wallets/${rewardWallet}/transactions/register_stake_pool.signed \
    ${NETWORK_ARGUMENT} 2>&1)

if [[ $OUT =~ "Error" ]]
then
    echo "An error occoured."
    echo ${OUT}
    read
else
    echo "Transaction has been submitted to the blockchain."
    echo ${OUT}

    # Wait for blockchain to register the pool
    #wait_for_slot ${TTL}
    wait_for_pool_registration
    echo "Your stake pool registration has been sent to the blockchain."
    touch ${NODE_PATH}/staking/wallets/${rewardWallet}/transactions/register_stake_pool.submitted
fi
