#!/bin/bash

TIMESTAMP=$(date +%s)
if [ -z "$name" ]; then
	export name="main"
fi

# Check for required files
if [ ! -f "${WORK_DIR}/wallets/${name}/payment.addr" ]; then
    echo "Missing required payment.addr. You need to run \`wallet create --name ${name}\` to generate this key."
    echo "Or use \`--name wallet_name\` to select an existed wallet."
    exit 3 #TODO $ERROR_CODE_MISSING
fi

# Wait for node to sync
if [[ "${WAIT_FOR_SYNC}" == "True" ]]; then
   # wait_for_sync 99.90
   echo "Wait for sync is not supported."
   exit 1
fi

ADDRESS=$(cat "${WORK_DIR}/wallets/${name}/payment.addr")

#docker run --interactive \
#    --env CARDANO_NODE_SOCKET_PATH=/node/node.socket \
#    --volume "${WORK_DIR}/${CARDANO_NETWORK}-relay:/node" \
#    --volume $PWD:/root \
#    --workdir /root \
#    genzbank/cardano-cli \
#        query utxo ${NETWORK_ARGUMENT} \
#        --address ${ADDRESS}

count=0
txInString=""
REMAINING=0
while true; do
    echo ""
    echo "Checking balance for address ${ADDRESS}."
    echo ""

    TOTAL_LOVELACE=0
    
    UTXOS=$(docker run --interactive \
        --env CARDANO_NODE_SOCKET_PATH=/node/node.socket \
        --volume "${WORK_DIR}/${CARDANO_NETWORK}-relay:/node" \
        --volume $WORK_DIR:/root \
        --workdir /root \
        genzbank/cardano-cli \
            query utxo ${NETWORK_ARGUMENT} \
            --address ${ADDRESS} | tail -n +3)
    echo "UTXO#TXIX: LOVELACE"
    while IFS= read -r line ; do
        arr=(${line})
        LOVELACE=${arr[2]}
        #TOTAL_LOVELACE=$(expr ${TOTAL_LOVELACE} + ${LOVELACE})

        if [ -n "${LOVELACE}" ]; then
            echo "${arr[0]}#${arr[1]}: ${arr[2]}"
            REMAINING=$(expr ${LOVELACE} + ${REMAINING})
            txInString="$txInString --tx-in ${arr[0]}#${arr[1]}"
            count=$(expr ${count} + 1)
        fi
    done <<< "${UTXOS}"

    echo "Address is successfully funded."
    echo ""
    echo "Got UTXO"
    echo "UTXO count: ${count}"
    echo "Total amount: ${REMAINING}"
    if [ "$count" -gt 1 ]; then
        echo "Getting start to merge"
        break
    fi
    echo "Nothing merge"
    exit 0
done

mkdir -p "${WORK_DIR}/wallets/${name}/transactions/"

docker run --interactive \
    --env CARDANO_NODE_SOCKET_PATH=/node/node.socket \
    --volume "${WORK_DIR}/${CARDANO_NETWORK}-relay:/node" \
    --volume "${WORK_DIR}/wallets/${name}:/root" \
    --workdir /root \
    genzbank/cardano-cli \
    query protocol-parameters \
        ${NETWORK_ARGUMENT} \
        --out-file protocol.json

# Draft transaction
docker run --interactive \
    --env CARDANO_NODE_SOCKET_PATH=/node/node.socket \
    --volume "${WORK_DIR}/${CARDANO_NETWORK}-relay:/node" \
    --volume "${WORK_DIR}/wallets/${name}:/root" \
    --workdir /root \
    genzbank/cardano-cli \
    transaction build-raw \
        ${txInString} \
        --tx-out ${ADDRESS}+0 \
        --ttl 0 \
        --fee 0 \
        --out-file transactions/tx.${TIMESTAMP}.draft



FEE=$(docker run --interactive \
    --env CARDANO_NODE_SOCKET_PATH=/node/node.socket \
    --volume "${WORK_DIR}/${CARDANO_NETWORK}-relay:/node" \
    --volume "${WORK_DIR}/wallets/${name}:/root" \
    --workdir /root \
    genzbank/cardano-cli \
    transaction calculate-min-fee \
        --tx-body-file transactions/tx.${TIMESTAMP}.draft \
        --tx-in-count ${count} \
        --tx-out-count 1 \
        ${NETWORK_ARGUMENT} \
        --witness-count 1 \
        --byron-witness-count 0 \
        --protocol-params-file protocol.json | tr ' ' '\n' | head -1)


# Update slot and TTL
SLOT=$(${SRC_DIR}/relay_get_slot)
TTL=$(expr ${SLOT} + 500)

# Display transaction info
RECEIVE_LOVELACE=$(expr ${REMAINING} - ${FEE})
echo "Creating transaction"
echo "Current tip Slot: ${SLOT}"
echo "TTL: ${TTL}"
echo ""
echo "To address: ${ADDRESS}"
echo "Send amount: ${RECEIVE_LOVELACE} Lovelace"
echo "Fee is: ${FEE} Lovelace"
echo "Balance after transaction: ${RECEIVE_LOVELACE} Lovelace"




#
# Create the transaction
#
echo "Create transaction"
docker run --interactive \
    --env CARDANO_NODE_SOCKET_PATH=/node/node.socket \
    --volume "${WORK_DIR}/${CARDANO_NETWORK}-relay:/node" \
    --volume "${WORK_DIR}/wallets/${name}:/root" \
    --workdir /root \
    genzbank/cardano-cli \
    transaction build-raw \
        ${txInString} \
        --tx-out ${ADDRESS}+${RECEIVE_LOVELACE} \
        --ttl ${TTL} \
        --fee ${FEE} \
        --out-file transactions/tx.${TIMESTAMP}.raw

docker run --interactive \
    --env CARDANO_NODE_SOCKET_PATH=/node/node.socket \
    --volume "${WORK_DIR}/${CARDANO_NETWORK}-relay:/node" \
    --volume "${WORK_DIR}/wallets/${name}:/root" \
    --workdir /root \
    genzbank/cardano-cli \
    transaction sign \
        --tx-body-file transactions/tx.${TIMESTAMP}.raw \
        --signing-key-file payment.skey \
        ${NETWORK_ARGUMENT} \
        --out-file transactions/tx.${TIMESTAMP}.signed
    

# Submit the transaction
read -n 1 -r -s -p $'Press enter to submit the transaction...\n'

echo "Submit transaction"
OUT=$(cardano-cli transaction submit \
    --tx-file transactions/tx.${TIMESTAMP}.signed \
    ${NETWORK_ARGUMENT} 2>&1)

if [[ $OUT =~ "Error" ]]
then
    echo "An error occoured."
    echo ${OUT}
    read
else
    echo "Transaction has been submitted to the blockchain."
    echo ${OUT}
fi
