#!/bin/bash

# Init vars
source "${SRC_DIR}/functions/check_balance"
source "${SRC_DIR}/functions/check_pool_registration"
source "${SRC_DIR}/functions/wait_for_pool_registration"
source "${SRC_DIR}/functions/wait_for_slot"
source "${SRC_DIR}/functions/wait_for_sync"

WALLET=$1
TIMESTAMP=$(date +%s)

# Enter staking directory
stakingDir="${WORK_DIR}/${CARDANO_NETWORK}-staking"
relayDir="${WORK_DIR}/${CARDANO_NETWORK}-relay"
mkdir -p wallets/${rewardWallet}/transactions
walletsDir="${WORK_DIR}/wallets"

if [ -z "$name" ]; then
	export name="main"
fi

# Check for required files
if [ ! -f "${WORK_DIR}/wallets/${name}/payment.addr" ]; then
	echo "Missing required payment.skey. You need to run \`wallet generate --name=${name}\` to generate this key."
	exit 3 #TODO $ERROR_CODE_MISSING
fi

# Check for required files
if [ ! -f "${WORK_DIR}/wallets/${name}/payment.addr" ]; then
    echo "Missing required payment.addr. You need to run \`wallet create --name ${name}\` to generate this key."
    echo "Or use \`--name wallet_name\` to select an existed wallet."
    exit 3 #TODO $ERROR_CODE_MISSING
fi

	

if [ ! -f "${WORK_DIR}/wallets/${name}/stake.addr" ]; then
    echo "Missing required stake.addr. You need to run \`wallet generate --name=${WALLET}\` to generate this key."
    exit 3 #TODO $ERROR_CODE_MISSING
fi

if [ ! -f "${WORK_DIR}/wallets/${name}/stake.skey" ]; then
    echo "Missing required stake.skey. You need to run \`wallet generate --name=${WALLET}\` to generate this key."
    exit 3 #TODO $ERROR_CODE_MISSING
fi

# Wait for node to sync
if [[ "${WAIT_FOR_SYNC}" == "True" ]]; then
    wait_for_sync 99.90
fi


docker run --interactive \
    --env CARDANO_NODE_SOCKET_PATH=/node/node.socket \
    --volume "${relayDir}:/node" \
    --volume "${stakingDir}:/root" \
    --workdir /root \
    genzbank/cardano-cli \
    query protocol-parameters \
        ${NETWORK_ARGUMENT} \
        --out-file protocol.json


ADDRESS=$(cat "wallets/${name}/payment.addr")
STAKE_ADDRESS=$(cat "wallets/${name}/stake.addr")

REWARD_BALANCE=$(docker run --interactive \
    --env CARDANO_NODE_SOCKET_PATH=/node/node.socket \
    --volume "${relayDir}:/node" \
    --volume "${stakingDir}:/root" \
    --workdir /root \
    genzbank/cardano-cli \
    query stake-address-info \
        ${NETWORK_ARGUMENT} \
        --address $STAKE_ADDRESS | jq -r ".[0].rewardAccountBalance")
check_balance 200000 # Dummy transaction fee

# Draft transaction
echo "Draft transaction"
docker run --interactive \
    --env CARDANO_NODE_SOCKET_PATH=/node/node.socket \
    --volume "${relayDir}:/node" \
    --volume "${WORK_DIR}/wallets:/wallets" \
    --volume "${stakingDir}:/root" \
    --workdir /root \
    genzbank/cardano-cli \
    transaction build-raw \
        --tx-in "${UTXO}#${TXIX}" \
        --tx-out ${ADDRESS}+0 \
        --withdrawal ${STAKE_ADDRESS}+${REWARD_BALANCE} \
        --ttl 0 \
        --fee 0 \
        --out-file /wallets/transactions/tx.${TIMESTAMP}.draft

echo "Calculate fee"
FEE=$(docker run --interactive \
    --env CARDANO_NODE_SOCKET_PATH=/node/node.socket \
    --volume "${relayDir}:/node" \
    --volume "${walletsDir}:/wallets" \
    --volume "${stakingDir}:/root" \
    --workdir /root \
    genzbank/cardano-cli \
    transaction calculate-min-fee \
        --tx-body-file /wallets/transactions/tx.${TIMESTAMP}.draft \
        --tx-in-count 1 \
        --tx-out-count 1 \
        ${NETWORK_ARGUMENT} \
        --witness-count 1 \
        --byron-witness-count 0 \
        --protocol-params-file protocol.json | tr ' ' '\n' | head -1)

# Find UTXO in address with enough lovelace to do the transaction
check_balance ${FEE}

# Update slot and TTL
SLOT=$("${SRC_DIR}/relay_get_slot")
TTL=$(expr ${SLOT} + 5000)

# Display transaction info
BALANCE_AFTER_TX=$(expr ${LOVELACE} + ${REWARD_BALANCE} - ${FEE})
echo "Creating rewards withdrawal transaction"
echo "Current tip Slot: ${SLOT}"
echo "TTL: ${TTL}"
echo "Withdrawing rewards from: ${STAKE_ADDRESS}"
echo "Withdrawing rewards to: ${ADDRESS}"
echo "Fee is: ${FEE} Lovelace"
echo "Rewards amount: ${REWARD_BALANCE} Lovelace"
echo "Lovelace before withdrawal: ${LOVELACE}"
echo "Lovelace after withdrawal: ${BALANCE_AFTER_TX}"

#
# Create the transaction
#
docker run --interactive \
    --env CARDANO_NODE_SOCKET_PATH=/node/node.socket \
    --volume "${WORK_DIR}/${CARDANO_NETWORK}-relay:/node" \
    --volume "${WORK_DIR}/wallets:/wallets" \
    --volume "${stakingDir}:/root" \
    --workdir /root \
    genzbank/cardano-cli \
    transaction build-raw \
        --tx-in "${UTXO}#${TXIX}" \
        --tx-out ${ADDRESS}+${BALANCE_AFTER_TX} \
        --withdrawal ${STAKE_ADDRESS}+${REWARD_BALANCE} \
        --ttl ${TTL} \
        --fee ${FEE} \
        --out-file /wallets/transactions/tx.${TIMESTAMP}.raw

docker run --interactive \
    --env CARDANO_NODE_SOCKET_PATH=/node/node.socket \
    --volume "${WORK_DIR}/${CARDANO_NETWORK}-relay:/node" \
    --volume "${WORK_DIR}/wallets:/wallets" \
    --volume "${stakingDir}:/root" \
    --workdir /root \
    genzbank/cardano-cli \
    transaction sign \
        --tx-body-file /wallets/transactions/tx.${TIMESTAMP}.raw \
        --signing-key-file /wallets/${name}/payment.skey \
        --signing-key-file /wallets/${name}/stake.skey \
        ${NETWORK_ARGUMENT} \
        --out-file /wallets/transactions/tx.${TIMESTAMP}.signed

# Submit the transaction
read -n 1 -r -s -p $'Press enter to submit the transaction...\n'

echo "Submit transaction"
OUT=$(docker run --interactive \
    --env CARDANO_NODE_SOCKET_PATH=/node/node.socket \
    --volume "${WORK_DIR}/${CARDANO_NETWORK}-relay:/node" \
    --volume "${WORK_DIR}/wallets:/wallets" \
    --volume "${stakingDir}:/root" \
    --workdir /root \
    genzbank/cardano-cli \
    transaction submit \
        --tx-file /wallets/transactions/tx.${TIMESTAMP}.signed \
        ${NETWORK_ARGUMENT} 2>&1)

if [[ $OUT =~ "Error" ]]
then
    echo "An error occoured."
    echo ${OUT}
    read
else
    echo "Transaction has been submitted to the blockchain."
    echo ${OUT}
fi
